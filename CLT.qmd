---
title: "CLT"
author: "Visruth Srimath Kandali"
format: html
---

## Set Up

```{r setup}
# TODO: change back to 100k
r <- 100000 # number of repetitions
# sample_sizes <- c(5, 10, 20)
sample_sizes <- c(5, 10, 20, 30, 40, 100, 200, 300, 400, 1000, 2000, 3000, 4000, 5000, 10000)
```

We are opting to draw 100,000 samples (repetitions) to create the sampling distribution so as to mitigate any concerns of random variability influencing our conclusions.

```{r}
analysis <- function(statistic, distro, n, ...) {
  # TODO profile and optimize
  set.seed(0)

  sample_statistics <- numeric(r)
  sapply(1:r, function(i) {
    sample_statistics[i] <<- statistic(distro(n, ...))
  })

  s <- sd(sample_statistics)
  m <- mean(sample_statistics)
  skewness <- moments::skewness(sample_statistics)

  upper <- sum(sample_statistics >= m + 1.96 * s) / r
  lower <- sum(sample_statistics <= m - 1.96 * s) / r

  # hist(distro(n, ...), main = paste("Example Sample Distribution, n = ", n))
  # hist(sample_means, main = "Sampling Distribution")
  # qqnorm(sample_means)
  # qqline(sample_means)

  upper - lower
}
```

An extensible function that generates sampling distributions given a population function to sample from, inferred parameters for that population.

```{r}
set.seed(0)
expected <- moments::skewness(replicate(r, mean(rlnorm(20, 0, 0.25))))
set.seed(0)
actual <- analysis(mean, rlnorm, n = 20, meanlog = 0, sdlog = 0.25)
expected - actual
```

Simple example to show that this function works. FUNCTION NEEDS TO OUTPUT SKEWNESS.

```{r}
lnormskew <- function(sigma) (exp(sigma^2) + 2) * sqrt(exp(sigma^2) - 1)
betaskew <- function(a, b) (2 * (b - a) * sqrt(a + b + 1)) / ((a + b + 2) * sqrt(a * b))
```

Some functions to calculate skewness of a few distributions.

```{r}
# Do T statistic and compare to t distribution
df <- data.frame(
  sapply(sample_sizes, analysis, statistic = mean, distro = rlnorm, meanlog = 0, sdlog = 1.4865),
  sapply(sample_sizes, analysis, statistic = mean, distro = rpois, lambda = 0.001),
  sapply(sample_sizes, analysis, statistic = mean, distro = rgamma, shape = 0.02),
  sapply(sample_sizes, analysis, statistic = mean, distro = rlnorm, meanlog = 0, sdlog = 1),
  sapply(sample_sizes, analysis, statistic = mean, distro = rexp),
  sapply(sample_sizes, analysis, statistic = mean, distro = rlnorm, meanlog = 0, sdlog = 0.5),
  sapply(sample_sizes, analysis, statistic = mean, distro = rlnorm, meanlog = 0, sdlog = 0.25),
  sapply(sample_sizes, analysis, statistic = mean, distro = rbeta, shape1 = 0.3, shape2 = 0.2),
  sapply(sample_sizes, analysis, statistic = mean, distro = rnorm)
)

df <- t(df)

colnames(df) <- sample_sizes
# rownames(df) <- c("Log Normal (gamma1 = 31.65266)", "Poisson (gamma1 = 31.6228)")
rownames(df) <- c("Log Normal (gamma1 = 31.65266)", "Poisson (gamma1 = 31.6228)", "Gamma (gamma1 = 20)", "Log Normal (gamma1 = 6.1849)", "Exponential (gamma1 = 2)", "Log Normal (gamma1 = 1.7502)", "Log Normal (gamma1 = 0.7783)", "Beta (gamma1 = -0.4)", "Normal (gamma1 = 0)")

df
```

Observing the effects of skewness

```{r}
df <- data.frame(
  sapply(sample_sizes, analysis, statistic = mean, distro = rlogis),
  sapply(sample_sizes, analysis, statistic = mean, distro = runif),
  sapply(sample_sizes, analysis, statistic = mean, distro = rt, df = 4),
  sapply(sample_sizes, analysis, statistic = mean, distro = rnorm)
)

df <- t(df)

colnames(df) <- sample_sizes
rownames(df) <- c("Logistic (beta2 = 6/5)", "t (beta2 = inf)", "Normal (beta2 = 0)")

df
```

Looking at effects of Kurtosis--three distributions with 0 skewness but differing kurtosis.

Distributions:

-   Just use Pearson?

-   Use log normal and adjust sigma for skewness level?

-   Exponential

-   Normal

-   Chi Square

-   Uniform
